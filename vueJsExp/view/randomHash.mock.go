// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: randomHash.go

package view

import (
	ctx "github.com/cjtoolkit/ctx/v2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRandomHashView is a mock of RandomHashView interface
type MockRandomHashView struct {
	ctrl     *gomock.Controller
	recorder *MockRandomHashViewMockRecorder
}

// MockRandomHashViewMockRecorder is the mock recorder for MockRandomHashView
type MockRandomHashViewMockRecorder struct {
	mock *MockRandomHashView
}

// NewMockRandomHashView creates a new mock instance
func NewMockRandomHashView(ctrl *gomock.Controller) *MockRandomHashView {
	mock := &MockRandomHashView{ctrl: ctrl}
	mock.recorder = &MockRandomHashViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRandomHashView) EXPECT() *MockRandomHashViewMockRecorder {
	return m.recorder
}

// ExecRandomHashView mocks base method
func (m *MockRandomHashView) ExecRandomHashView(context ctx.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecRandomHashView", context)
}

// ExecRandomHashView indicates an expected call of ExecRandomHashView
func (mr *MockRandomHashViewMockRecorder) ExecRandomHashView(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecRandomHashView", reflect.TypeOf((*MockRandomHashView)(nil).ExecRandomHashView), context)
}
